@using Kvota.Pages.Products
@using Kvota.Interfaces
@using Kvota.Models.Content
@using ButtonType = BlazorBootstrap.ButtonType
@using Size = MudBlazor.Size
@inject IRepo<ContactsModel> ContactService
@inject ISerializeService<ContactsModel> ContactSerialize
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Kvota.Constants
@inject ProtectedLocalStorage LocalStorage

<div class="productlist__products">

    @if (Product != null)
    {
        
        
            <div class="productlist__product product">
@*                <div >
                    <img class="product__image"src="@items.Image">
                </div>*@
                <div class="product__body">
                    <a class="product__name product__text" @onclick="@(e => GetModalCard(Product.Id))">@Product.Name</a>
                    <span class="product__pnumber product__text">Парт-номер :
                        @if (Product.PartNumber != null)
                        {
                            @Product.PartNumber
                        }
                    </span>
                    @if (Product.Brand != null)
                    {
                        <span class="product__brand product__text">Производитель: @Product.Brand!.Name</span>
                    }
                </div>
        <div class="product__prices">
            <div>
                @if (Product.Price != null)
                {
                    @if (Product.SalePrice != null)
                    {
                        <span class="product__sale ">@Math.Round((double)((Product.Price! / 100) * (100 - Product.SalePrice)), 2) р.</span>
                    }
                    <span class="product__price ">@Product.Price р.</span>
                }
            </div>
                <div class="product__feetback ">
                    @*                    <Dropdown OnShowing="OnDropdownShowingAsync">
                        <DropdownToggleButton Color="ButtonColor.Secondary">Уточнить наличие и цену</DropdownToggleButton>
                        <DropdownMenu>
                            @if (Contacts != null)
                            {
                                <DropdownItem Type="ButtonType.Link">
                                    <a href="tel:@Contacts.PhoneOne" target="_blank">
                                        <i class="bi bi-telephone" style="font-size: 1.5rem; margin-right: 1rem"></i>@Contacts.PhoneOne
                                    </a>
                                </DropdownItem>
                                <DropdownItem Type="ButtonType.Link">
                                    <a href="mailto:@Contacts.EmailOne">
                                        <i class="bi bi-envelope-at" style="font-size: 1.5rem; margin-right: 1rem"></i>@Contacts.EmailOne
                                    </a>
                                </DropdownItem>
                            }
                        </DropdownMenu>
                    </Dropdown>*@
                    <AuthorizeView Roles="@RoleNames.User">
                        <Authorized>
                            <div class="d-flex align-items-center justify-content-center" style="height: 2rem">
                                  
                                     
                                        <MudNumericField @bind-Value="_quantity" 
                                                         @onchange="async () => await AddProductToOrder(Product.Id, _quantity)"
                                                          Variant="Variant.Outlined" Min="0" Style="height: 2.2rem; width: 6rem; "/>
                          
                                    <button type="button" @onclick="async () => await AddProductToOrder(Product.Id, _quantity)" class="btn btn-outline-primary has-icon  mx-1"><i class="bi bi-basket2-fill"></i></button>
                            
                                    @if (ProductInOrderList != null && ProductInOrderList.Select(s => s.Id).Contains(Product.Id))
                                    {
                                        <button type="button" class="btn btn-close" @onclick="async () => await DeleteProductFromOrder(Product.Id)"></button>
                                    }
                                </div>
                        </Authorized>
                        <NotAuthorized>
                            <div class="d-flex align-items-center justify-content-center" style="height: 2rem">
                                     <MudNumericField @bind-Value="_quantity"
                                                      Variant="Variant.Outlined" Min="0" Style="height: 2.2rem; width: 6rem; "/>
                                    <button type="button" class="btn btn-outline-primary has-icon  mx-1" @onclick="() => NotAuthClick()"><i class="bi bi-basket2-fill"></i></button>
                            </div>

                        </NotAuthorized>
                    </AuthorizeView>
                    
                    
                </div>
            </div>
                
        </div>
  
        
    }

    <MudDialog @bind-IsVisible="_visibleProductCard"  
               Options="new DialogOptions() { FullScreen = true, CloseOnEscapeKey = true}">
        <TitleContent>
            <MudIconButton Icon="@Icons.Material.TwoTone.Cancel" 
                           Color="Color.Info" 
                           Size="Size.Large" 
                           Class="modalImage__closeBtn" 
                           OnClick="()=>_visibleProductCard=false"></MudIconButton>
        </TitleContent>
        <DialogContent>
            <ProductCard Id="@IdCurrent"/>
        </DialogContent>
    </MudDialog>
</div>


