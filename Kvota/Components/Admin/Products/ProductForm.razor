@using Microsoft.AspNetCore.Components
@using Kvota.Components.SelectedCategoriesListComponents
@using Kvota.Interfaces
@using Size = MudBlazor.Size
@inject IRepo<Storage> StorageRepo
@inject IRepo<Brand> BrandRepo
<MudText Typo="Typo.h5">@TitleText</MudText>
@if (Product != null)
{
    <MudForm @ref="ProductFormRef" @bind-IsValid="@_success">
        <MudCard>
            <MudCardContent>

                <MudTextField Variant="Variant.Outlined"
                              @bind-Value="@Product.Name"
                              For="@(() => Product.Name)"
                              Immediate="true"
                              Label="Название продукта"
                              Required="true"
                              RequiredError="Введите название продукта"/>
                <MudTextField Variant="Variant.Outlined"
                              @bind-Value="@Product.PartNumber"
                              For="@(() => Product.PartNumber)"
                              Immediate="true"
                              Label="Парт-номер" />
                <div >
                    <MudPaper Class="d-flex align-items-center justify-content-between" Style="margin: 1rem 0; padding: 1rem;" Outlined="true">
                        <MudText>
                            <span style="color:dimgray">Категория: </span>
                            @if (Product.Category != null)
                            {
                                @Product.Category.Name
                            }

                        </MudText>
                        <MudButton Variant="Variant.Filled" Style="" Size="Size.Small" OnClick="() => _visibleCategorySelectedList = true" Color="Color.Tertiary">Выбрать</MudButton>
                    </MudPaper>
                    
                </div>
                <MudSelect Variant="Variant.Outlined" @bind-Value="Product.BrandId"
                           Label="Производитель"
                           T="Guid?" ToStringFunc="b =>  Brands!.Select(b=>b).FirstOrDefault(w=>w.Id==Product.BrandId)!.Name" 
                           CloseIcon="@Icons.Material.Filled.Flag"
                           AdornmentColor="Color.Tertiary">
                    @if (Brands != null)
                    {
                        @foreach (var item in Brands)
                        {
                            <MudSelectItem T="Guid?" Value="@item.Id">@item.Name</MudSelectItem>
                        }

                    }
                </MudSelect>
                <MudPaper Style="margin: 1rem 0; padding: 1rem" Outlined="true">
                    <MudText>Количество на складах</MudText>
                    @if (Product.ProductsInStorage != null && Product.ProductsInStorage.Any())
                    {
                        foreach (var item in Product.ProductsInStorage)
                        {
                            <div class="d-flex align-items-center">
                                <MudText Class="mr-2" Typo="Typo.body1"><b>@item.Storage!.Name :</b></MudText>
                                <MudTextField Variant="Variant.Outlined"
                                              @bind-Value="item.Quantity"
                                              For="@(() => item.Quantity)"
                                              Immediate="true"
                                              Label="Количество" />

                                <MudIconButton Icon="@Icons.Material.Filled.Clear" 
                                               Color="Color.Warning"
                                               OnClick="() => Product.ProductsInStorage.Remove(item)"/>
                            </div>
                        }
                    }
                    <MudMenu Style="margin : 1rem 0;" Variant="Variant.Filled"
                             Color="Color.Tertiary"Label="Добавиь склад">
                        @if (Storages != null)
                        {
                            @foreach (var item in Storages)
                            {
                                <MudMenuItem T="Guid?"
                                             OnClick="() => AddProductInStorage(item) ">
                                    @item.Name <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary"></MudIcon>
                                </MudMenuItem>
                            }

                        }
                  
                    </MudMenu>
                </MudPaper>
                
                
                <MudTextField Label="Цена" @bind-Value="Product.Price"
                              For="@(() => Product.Price)"
                              Variant="Variant.Outlined"
                              Class="mb-3"
                />
                
                <div Class="mt-4 fs-4" Style="flex: 1 1 auto">
                    <MudExpansionPanels>
                        <MudExpansionPanel Class="fw-bold"Text="Описание">
                            <div class="">

                                <MudSwitch Label="Развернуть" @bind-Checked="@_checkSizeTextArea" @onclick="() => _sizeTextArea = _sizeTextArea == 5 ? 30 : 5" Color="Color.Primary" />
                                <MudTextField T="string" Label="Дополнительная информация" Variant="Variant.Outlined" @bind-Value="Product.Description" Lines="@_sizeTextArea"/>

                            </div>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                    
                </div>

                <MudPaper Style="margin: 1rem 0; padding: 1rem" Outlined="true">
                    <MudText>Характеристики</MudText>
                    @if (Product.ProductOption != null && Product.ProductOption.Any())
                    {
                        foreach (var item in Product.ProductOption)
                        {
                            <div class="d-flex align-items-center">
                                <MudText Class="mr-2" Typo="Typo.body1"><b>@item.CategoryOption!.Name :</b></MudText>
                                <MudTextField Variant="Variant.Outlined"
                                  @bind-Value="item.Value"
                                  For="@(() => item.Value)"
                                  Immediate="true"
                                  Label="Значение" />
                                <MudText Class="ml-2" Typo="Typo.body1"><b>@item.CategoryOption!.Measure</b></MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Clear"
                                   Color="Color.Warning"
                                   OnClick="() => Product.ProductOption.Remove(item)" />
                            </div>
                        }
                    }
                    <MudMenu Style="margin : 1rem 0;" Variant="Variant.Filled"
                         Color="Color.Tertiary" Label="Добавиь характеристику">
                        @if (Product.Category is {CategoryOptions: { } })
                        {
                            @foreach (var item in Product.Category.CategoryOptions)
                            {
                                <MudMenuItem
                                 OnClick="() => AddProductOption(item) ">
                                    @item.Name <MudIcon Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary"></MudIcon>
                                </MudMenuItem>
                            }

                        }

                    </MudMenu>
                </MudPaper>
               
            </MudCardContent>

            <MudCardActions>
                <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="Validation" Color="Color.Info">@ButtonText</MudButton>
            </MudCardActions>
        </MudCard>
    </MudForm>
    <MudDialog @bind-IsVisible="_visibleCategorySelectedList">
        <DialogContent>
            <SelectedCategoriesListComponent
                @bind-SelectedCategory="@Product.Category"/>
            <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="ApplyCategory" Color="Color.Tertiary">Применить</MudButton>
        </DialogContent>
    </MudDialog>


}


@code {
    [Parameter] public Product Product { get; set; } = null!;
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }



    public List<Brand>? Brands { get; set; }
    public List<Storage>? Storages { get; set; } = null!;

   
    private bool _checkSizeTextArea { get; set; } = false;
    private int _sizeTextArea = 5;
    private bool _visibleCategorySelectedList;


    bool _success;
    protected override async Task OnInitializedAsync()
    {
        Storages = (List<Storage>?)await StorageRepo.GetAllAsync();
        Brands = (List<Brand>?)await BrandRepo.GetAllAsync();
    }

    [Parameter]
    public MudForm? ProductFormRef { get; set; }

    private async Task Validation()
    {
        if (ProductFormRef!.IsValid)
            await OnValidSubmit.InvokeAsync();

        else
            await ProductFormRef.Validate();

    }
    private void ApplyCategory()
    {
        if (Product.Category != null) Product.CategoryId = Product.Category.Id;
        _visibleCategorySelectedList = false;
    }
    private async void AddProductInStorage(Storage storage)
    {
        Product.ProductsInStorage ??= new List<ProductsInStorage>(); 
        Product.Storage ??= new List<Storage>();
        Product.Storage.Add(storage);
        Product.ProductsInStorage.Add(new ProductsInStorage { Storage = storage, StorageId = storage.Id, Product = Product, ProductId = Product.Id});
        await InvokeAsync(StateHasChanged);
    }
    private async void AddProductOption(CategoryOption categoryOption)
    {
        Product.ProductOption ??= new List<ProductOption>();
        Product.ProductOption.Add(new ProductOption() { CategoryOptionId = categoryOption.Id, CategoryOption = categoryOption, Product = Product, ProductId = Product.Id});
        await InvokeAsync(StateHasChanged);
    }
}
