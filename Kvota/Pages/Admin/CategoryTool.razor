@page "/admin/category"
@attribute [Authorize(Roles = "Administrators")]
@using Kvota.Components.CategoryDrawer
@using Kvota.Components.Admin
@using Kvota.Interfaces
@using Microsoft.AspNetCore.Components


@using Position = MudBlazor.Position
@using Size = MudBlazor.Size
@inject IRepo<Category> CategoryService

<NavAdmin></NavAdmin>
<br />
<MudText Typo="Typo.h6">Категории</MudText>
@if (Categories != null)
{
    <MudSwitch @bind-Checked="@Label_Switch1" Label="Перемещение категорий" Color="Color.Info" />

    @if (Label_Switch1)
    {
        @if (RelocatedCategory != null)
        {
            <MudText Style="text-decoration: underline" Typo="Typo.subtitle1">Перемещаемая категория @RelocatedCategory.Name</MudText>
            @if (ParentToRelocation != null)
            {
                <MudText Style="text-decoration: underline" Typo="Typo.subtitle1">Место перемещения @(ParentToRelocation.Name ?? "Корневая директория")</MudText>
            }
            else
            {
                <MudText Typo="Typo.subtitle1">Выберите место для перемещения</MudText>
            }
            <MudButton Style="height: 30px; margin-top: 1rem" Variant="Variant.Text" Size="Size.Small" OnClick="GetRelocationCategory" Color="Color.Tertiary">Переместить</MudButton>
            <MudButton Style="height: 30px; margin-top: 1rem" Variant="Variant.Text" Size="Size.Small" OnClick="ResetRelocationCategory" Color="Color.Primary">Сбросить</MudButton>
        }
        else
        {
            <MudText Typo="Typo.subtitle1">Выберите категорию для перемещения</MudText>
        }

    }

    <MudTabs Position="Position.Left" Elevation="1" Outlined="true" Rounded="true" PanelClass="pl-2" Style="height: 100%;">
        @if (@RelocatedOrParent)
        {
            <MudTabPanel>
                <ChildContent>

                </ChildContent>
                <TabContent>

                    <MudButton OnClick="() => SetParentToRelocation(new Category() { ParentId = null })" Color="Color.Success">
                        <MudIcon Color="Color.Success" Icon="@Icons.Material.Filled.ArrowCircleDown" /> В Корневую папку
                    </MudButton>
                </TabContent>
            </MudTabPanel>
        }
        @foreach (var category in Categories.Where(w => w.ParentId == null))
        {
            @if (category.Children != null && category.Children.Any())
            {
                <MudTabPanel>
                    <ChildContent>
                        <MudPaper Width="100%">
                            <MudList Style="" Clickable="true" @bind-SelectedItem="selectedItem" @bind-SelectedValue="selectedValue" Color="Color.Primary">
                                @foreach (var subCategory in category.Children.OrderBy(o => o.Name))
                                {
                                    <CategoryMenuItemComponent category="subCategory"
                                               CheckedRelocatedCategory="@SetRelocatedCategory"
                                               CheckedParentCategory="@SetParentToRelocation"
                                               VisableButtonRelocation="Label_Switch1"
                                               RelocatedOrParent="RelocatedOrParent"
                                               RefreshCategoryListCallback="GetCategory" />
                                }
                            </MudList>
                        </MudPaper>
                    </ChildContent>

                    <TabContent>
                        <CategoryRelocatedButtonPanel CurrentCategory="category"
                                          CheckedParentCategory="SetParentToRelocation"
                                          CheckedRelocatedCategory="SetRelocatedCategory"
                                          VisibleButtons="Label_Switch1"
                                          RelocatedOrParent="RelocatedOrParent" />
                        @category.Name
                        <CategorySettingsMenuComponent RefreshCategoryListCallback="GetCategory" CurrentCategory="category" />
                    </TabContent>
                </MudTabPanel>
            }
            else
            {
                <div>
                    <MudTabPanel>
                        <ChildContent>

                        </ChildContent>

                        <TabContent>
                            <CategoryRelocatedButtonPanel CurrentCategory="category"
                                              CheckedParentCategory="SetParentToRelocation"
                                              CheckedRelocatedCategory="SetRelocatedCategory"
                                              VisibleButtons="Label_Switch1"
                                              RelocatedOrParent="RelocatedOrParent" />
                            <a style="width: 100%; height: 100%;" href=@($"/ddd/{category.Id}")>@category.Name</a>
                            <CategorySettingsMenuComponent RefreshCategoryListCallback="GetCategory" CurrentCategory="category" />
                        </TabContent>
                    </MudTabPanel>

                </div>
            }
        }
        <MudTabPanel>
            <ChildContent>
                <MudForm Style="">
                    <MudTextField @bind-Value="value" T="string" Label="Категория" Required="true" RequiredError="Введите название категории!" Lines="3" />
                    <MudButton Style="height: 30px; margin-top: 1rem" Variant="Variant.Text" Size="Size.Small" OnClick="AddCategory" Color="Color.Tertiary">Создать</MudButton>
                </MudForm>
            </ChildContent>
            <TabContent>
                <MudText>Добавить категорию</MudText> <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Add" class="ml-auto"></MudIcon>
            </TabContent>
        </MudTabPanel>
    </MudTabs>
}
}}

@code
{
    MudListItem selectedItem;
    object selectedValue = 1;
    string value;

    private List<Category>? Categories { get; set; }



    public bool open { get; set; }
    private Brand _currentCategory;

    public Category? ParentToRelocation;
    public Category? RelocatedCategory;
    public bool Label_Switch1 { get; set; } = false;
    public bool RelocatedOrParent { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Categories == null)
        {
            await GetCategory();
        }
    }

    private async Task GetCategory()
    {


        Categories = (List<Category>?)await CategoryService.GetAllAsync();
        Categories = Categories.OrderBy(o => o.Name).ToList();
        StateHasChanged();
    }

    public void SetParentToRelocation(Category category)
    {
        ParentToRelocation = category;
    }
    public void SetRelocatedCategory(Category category)
    {
        RelocatedCategory = category;
        RelocatedOrParent = true;
    }

    //public async void OpenCategoryDrawer()
    //{

    //    open = true;
    //    if (Categories == null)
    //    {
    //        await GetCategory();
    //    }

    //    StateHasChanged();
    //}

    //void CloseCategoryDrawer()
    //{
    //    open = false;
    //    selectedItem = null;
    //    StateHasChanged();
    //}

    private async Task AddCategory()
    {
        var category = new Category() { Name = value };
        await CategoryService.AddAsync(category);
        Categories!.Add(category);

    }

    private async void GetRelocationCategory()
    {
        if (RelocatedCategory == null || ParentToRelocation == null) return;
        RelocatedCategory.ParentId = ParentToRelocation.Id;
        if (await CategoryService.Update(RelocatedCategory))
        {
            ResetRelocationCategory();
            await GetCategory();
        }

    }
    private void ResetRelocationCategory()
    {
        RelocatedCategory = null;
        ParentToRelocation = null;
        RelocatedOrParent = false;
    }
}

@*<h2>@Title</h2>
<div class="row">
    <div class="col-lg-3 text-right">
        <button class="btn btn-success btn-sm" @onclick="@(e => GetModalAdd())" role="button">Добавить подкатегорию</button>
    </div>
    <div class="col-lg-3 text-right">
        <a class="btn btn-primary " href="/admin/catoptions/not/@Guid.Empty" role="button">Показать опции без категории</a>
    </div>
    <div class="col-lg-3 text-right">
        <a class="btn btn-secondary btn-sm" href="/admin/category/" role="button">Вернуться к категориям</a>
    </div>
</div>
@if (ItemList != null)
{
    <table class="table table-bordered table-striped table-sm">
        <thead>
            <tr>
                <th>Имя</th>
                <th>Описание</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @if (Id == Guid.Empty )
        {
            Id = null;
        }
        @foreach (var item in ItemList.Where(w => w.ParentId == Id))
        {
            <tr>
                <td>@item.Name</td>
                <td>@item.Description</td>
                <td class="text-end ">
                        <a class="btn btn-primary " href="/admin/catoptions/@item.Name/@item.Id" role="button">К Опциям Категории </a>
                    <button class="btn btn-secondary " @onclick="@(e => GetModalUpdate(item.Id))" role="button">Edit</button>
                    <button class="btn btn-danger " @onclick="@(e => @Delete(item.Id))" role="button">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>

    <Modal @ref="_modalAdd" title="Добавить">
        <BodyTemplate>
            <EditForm Model="@Item" OnValidSubmit="@SubmitAdd">
                <div class="form-group">
                    <label>Имя</label>
                    <InputText class="form-control" @bind-Value="Item!.Name" />
                </div>
                <div class="form-group">
                    <label>Описание</label>
                    <InputTextArea class="form-control" @bind-Value="Item.Description" />
                </div>
                <button type="submit" class="btn btn-primary">Создать</button>
            </EditForm>
        </BodyTemplate>

    </Modal>

    <Modal @ref="_modalUpdate" title="Изменить">
        <BodyTemplate>

            <EditForm Model="@ItemUpdate" OnValidSubmit="@SubmitUpdate">

                <div class="form-group">
                    <label>Имя</label>
                    <InputText class="form-control" @bind-Value="ItemUpdate!.Name" />
                </div>
                
                <div class="form-group">
                    <label>Описание</label>
                    <InputTextArea class="form-control" @bind-Value="ItemUpdate.Description" />
                </div>
                <button type="submit" class="btn btn-primary">Изменить</button>
            </EditForm>
            <EditForm Model="@ItemUpdate" OnValidSubmit="@SubmitUpdateGrand">
                <div class="form-group">
                    <label>Родительская категория</label>
                    <InputSelect @bind-Value="_tempId" class="form-control">
                        <option value="Id"></option>
                        @if (GcList != null)
                        {
                            @foreach (var item in GcList)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-primary">Изменить родительскую категорию</button>
            </EditForm>
        </BodyTemplate>
    </Modal>

    <Modal @ref="_modalError" title="Ошибка">
        <BodyTemplate>За данной категорией закреплены подкатегории</BodyTemplate>
    </Modal>*@
 