@page "/admin/product"
@attribute [Authorize(Roles = "Administrators")]
@using Kvota.Components.Admin.Products
@using Kvota.Interfaces
@using Kvota.Components.Admin
@inject IRepo<Product> ProductRepo
@inject ISerializeService<Home> HomeSerialize
@inject IServiceScopeFactory ServiceScopeFactory
@using Kvota.Components
@using System.IO
@using Kvota.Constants
@using Kvota.Models.Content
@using FileInfo = System.IO.FileInfo
@inject IJSRuntime JsRuntime
<div >
    <NavAdmin></NavAdmin>
    <div class="row">
        <div class="col text-right">
            <a  class="btn btn-success btn-sm" href="/admin/product/create" role="button">Создать продукт</a>
    @*        <a  class="btn btn-success btn-sm"@onclick="() => _visibleCreatedProductDialog=true" role="button">Создать продукт</a>*@
        </div>
        <div class="col text-right">
            <a class="btn btn-success btn-sm" href="/admin/product/excel" role="button">Загрузить из Excel</a>
        </div>
        <div class="col text-right">
            <a class="btn btn-success btn-sm" @onclick="@(e => OutputExcel((List<Product>)_filteredList!))" role="button">Выгрузить отфильтрованное в Excel</a>
        </div>
        <div class="col text-right">
            <a class="btn btn-success btn-sm" @onclick="@(e => OutputExcel((List<Product>)Products!))" role="button">Выгрузить всё в Excel</a>
        </div>
        <div class="col text-right">
            <a class="btn btn-success btn-sm" @onclick="@(e =>_visibleStorageDialog=true)" role="button">Склады</a>
        </div>
        <div class="col text-right">
            <button class="btn btn-danger btn-sm" @onclick="@(e => DeleteCheckedProduct(SelectedValues))" role="button">Удалить выделенные</button>
        </div>
        </div>
         
    @if (_pagedList != null)
    {
        <ProductFilterComponent Products="Products"  ProductListCallback="GetFilterList"></ProductFilterComponent>

        <table class="table table-bordered table-striped table-sm">
            <thead>
            <tr>
                <th>Check</th>
                <th></th>
                <th>Имя</th>
                <th>Парт-номер</th>
                <th>Бренд</th>
                <th>Подкатегория</th>
                <th>Цена</th>
                <th>Скидка</th>
                <th>Количество</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var item in _pagedList)
                {
                    _checked = false;
                <tr>
                    <td>
                        
                        @if (SelectedValues != null && SelectedValues.Contains(_value))  
                        {  
                        _checked = true;  
                        }  
                        <input type="checkbox" checked=@_checked  
                       @onchange="eventArgs => { CheckboxClicked(item.Id, eventArgs.Value!); }" />  
                    </td>
                    <td>
                            @if (item.Image == Links.DefaultImageProduct)
                            {
                                <img width="100" height="70" src="@Links.DefaultImageProduct" />
                            }
                            else
                            {
                                @if (Directory.Exists($"{Links.RootPath}{item.Image}"))
                                {
                                    var imageFirst = Directory.GetFiles($"{Links.RootPath}{item.Image}").FirstOrDefault();
                                    var fileInfo = item.Image + "/" + (new FileInfo(imageFirst!).Name);
                                    <img width="100" height="70" src="@fileInfo"/>
                                }
                            }
                        
                    </td>
                    <td>@item.Name</td>
                    <td>@item.PartNumber</td>
                    <td>
                        @if (item.Brand != null)
                        {@item.Brand.Name
                        }
                    </td>
                    <td>
                        @if (item.Category != null)
                        {@item.Category.Name
                        }
                    </td>
                    <td>@item.Price</td>
                    <td>@item.SalePrice</td>
                    <td>
                        @if (item.ProductsInStorage != null)
                        {
                            @item.ProductsInStorage.Select(s => s.Quantity).Sum()
                        }
                    </td>
                    <td class="text-right">
                        <a class="btn btn-primary btn-sm" href="/admin/prodoptions/@item.Name/@item.CategoryId/@item.Id" role="button">Опции</a>
                        <a class="btn btn-secondary btn-sm" href="/admin/product/edit/@item.Id" role="button">Изменить</a>
                          @*  <a class="btn btn-secondary btn-sm" @onclick="()=>OpenUpdateProductDialog(item.Id)" role="button">Изменить</a>*@
                            @if (!_home.ProductInHome.Contains(item.Id))
                            {
                                <button class="btn btn-success btn-sm" @onclick="@(e =>  {AddProductToHome(item.Id); })" role="button">Добавить на главную</button>
                            }
                            else
                            {
                                <button class="btn btn-danger btn-sm" @onclick="@(e => { RemoveProductFromHome(item.Id); })" role="button">Удалить с главной</button>
                            }
                       @* <button class="btn btn-danger btn-sm" @onclick="@(e => DeleteProduct(item.Id, item.Image!))" role="button">Delete</button>*@
                    </td>
                </tr>
            }
            </tbody>
        </table>
        <button class="btn btn-danger btn-sm" @onclick="@(e => LoadMore(_pagedList.Count))" role="button">Загрузить еще</button>
        <button class="btn btn-secondary btn-sm" onclick="document.getElementById('up_position').scrollIntoView({behavior:'smooth'})">Вверх</button>
       @* <PaginationComponent Products="_filteredList" ProductPgListCallback="GetPagedList"></PaginationComponent>*@

    }


</div>
<MudDialog @bind-IsVisible="_visibleStorageDialog" Style="min-width: 900px" Options="new DialogOptions(){CloseButton = true}">
    <DialogContent>
        <StorageSettings/>
    </DialogContent>
</MudDialog>
<CreateProductDialog VisibleDialog="_visibleCreatedProductDialog"
                     RefreshProductList="OnParametersSetAsync"
                     Close="() => _visibleCreatedProductDialog = false"/>
<EditProductDialog VisibleDialog="_visibleEditProductDialog"
                   ProductId="ProductId"
                   RefreshProductList="OnParametersSetAsync"
                   Close="() => _visibleEditProductDialog = false"/>
