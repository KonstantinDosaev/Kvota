@page "/usermanager"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@using Kvota.Areas.Identity.Data
@using Org.BouncyCastle.Tls
@inject UserManager<KvotaUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <table class="table">
                <thead>
                <tr>
                    <th>Id</th>
                    <th>User Name</th>
                    <th>Email</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var user in ColUsers)
                {
                    <tr>
                        <td>@user.Id.Substring(0, 5) ...</td>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>
                            <!-- Edit the current forecast -->
                            <button class="btn btn-primary"
                                    @onclick="(() => EditUser(user))">
                                Edit
                            </button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>

            @if (ShowPopup)
            {
                <!-- This is the popup to create or edit a user -->
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit User</h3>
                                <!-- Button to close the popup -->
                                <button type="button" class="close"
                                @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <!-- Edit form for the current user -->
                            <div class="modal-body">
                                <!-- Only show Id if not a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                <!-- Only allow edit if a new user -->
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text"
                                           placeholder="UserName"
                               @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text"
                                       placeholder="Email"
                               @bind="objUser.Email" />
                                <input class="form-control" type="password"
                                       placeholder="Password"
                               @bind="objUser.PasswordHash" />
                                <select class="form-control"
                                @bind="@CurrentUserRole">
                                    @foreach (var option in Options)
                                    {
                                        <option value="@option">
                                            @option
                                        </option>
                                    }
                                </select>
                                <br /><br />
                                <!-- Button to save the user -->
                                <button class="btn btn-primary"
                                @onclick="SaveUser">
                                    Save
                                </button>
                                <!-- Only show delete button if not a new record -->
                                @if (objUser.Id != "")
                                {
                                    <!-- Button to delete the forecast -->
                                    <button class="btn btn-danger"
                                @onclick="DeleteUser">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="AddNewUser">Add User</button>
        }
        else
        {
            <p>Вы не имеете прав администратора</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>Вы не вошли как пользователь</p>
        <NavLink href="/identity/account/login">Войти</NavLink>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
        var user = await _UserManager.FindByNameAsync("d@d");
        if (user != null)
        {
            // Is Admin@BlazorHelpWebsite.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;

        GetUsers();
    }

    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    // Collection to display the existing users
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Users", "Administrators" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;



    void AddNewUser()
    {
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            if (objUser.Id != "")
            {
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                user.Email = objUser.Email;
                await _UserManager.UpdateAsync(user);

                if (objUser.PasswordHash != "*****")
                {
                    var resetToken = await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser = await _UserManager.ResetPasswordAsync(user, resetToken, objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError = passworduser.Errors.FirstOrDefault().Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }

                        return;
                    }
                }

                var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);

                if ((CurrentUserRole == ADMINISTRATION_ROLE) & (!UserResult))
                {
                    await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    if ((CurrentUserRole != ADMINISTRATION_ROLE) & (UserResult))
                    {
                        await _UserManager.RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }
            }
            else
            {
                var NewUser =
                    new KvotaUser
                    {
                        UserName = objUser.UserName,
                        Email = objUser.Email
                    };
                var CreateResult = await _UserManager.CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult.Errors.FirstOrDefault() != null)
                    {
                        strError = CreateResult.Errors.FirstOrDefault().Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                }
                else
                {
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        await _UserManager.AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                }
            }
            ShowPopup = false;
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(IdentityUser _IdentityUser)
    {
        objUser = _IdentityUser;

        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            var UserResult =
                await _UserManager
                    .IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        ShowPopup = false;
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            await _UserManager.DeleteAsync(user);
        }
        GetUsers();
    }
    void ClosePopup()
    {
    // Close the Popup
        ShowPopup = false;
    }
    public void GetUsers()
    {
        strError = "";
        ColUsers = new List<IdentityUser>();

        var user = _UserManager.Users.Select(x => new IdentityUser
        {
            Id = x.Id,
            UserName = x.UserName,
            Email = x.Email,
            PasswordHash = "*****"
        });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }

}
